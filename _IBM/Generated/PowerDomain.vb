Namespace IBM

	''' <summary>Class Representing an IBM Power Domain</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>08/02/2014 18:22:41</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Caerus\_IBM\Generated\PowerDomain.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Caerus\_IBM\Generated\PowerDomain.tt", "1")> _
	<System.Serializable()> _
	Partial Public Class PowerDomain
		Inherits System.Object
		Implements System.IComparable
		Implements System.Xml.Serialization.IXmlSerializable

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32 _
			)

				MyBase.New()

				Index = _Index

			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState _
			)

				MyBase.New()

				Index = _Index
				State = _State

			End Sub

			''' <summary>Parametered Constructor (3 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1

			End Sub

			''' <summary>Parametered Constructor (4 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2

			End Sub

			''' <summary>Parametered Constructor (5 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String, _
				ByVal _ManagementPolicy As PowerDomainPolicy _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2
				ManagementPolicy = _ManagementPolicy

			End Sub

			''' <summary>Parametered Constructor (6 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String, _
				ByVal _ManagementPolicy As PowerDomainPolicy, _
				ByVal _TotalPower As Power _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2
				ManagementPolicy = _ManagementPolicy
				TotalPower = _TotalPower

			End Sub

			''' <summary>Parametered Constructor (7 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String, _
				ByVal _ManagementPolicy As PowerDomainPolicy, _
				ByVal _TotalPower As Power, _
				ByVal _AllocatedPower As Power _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2
				ManagementPolicy = _ManagementPolicy
				TotalPower = _TotalPower
				AllocatedPower = _AllocatedPower

			End Sub

			''' <summary>Parametered Constructor (8 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String, _
				ByVal _ManagementPolicy As PowerDomainPolicy, _
				ByVal _TotalPower As Power, _
				ByVal _AllocatedPower As Power, _
				ByVal _RemainingPower As Power _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2
				ManagementPolicy = _ManagementPolicy
				TotalPower = _TotalPower
				AllocatedPower = _AllocatedPower
				RemainingPower = _RemainingPower

			End Sub

			''' <summary>Parametered Constructor (9 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _State As PowerState, _
				ByVal _PowerModule1 As System.String, _
				ByVal _PowerModule2 As System.String, _
				ByVal _ManagementPolicy As PowerDomainPolicy, _
				ByVal _TotalPower As Power, _
				ByVal _AllocatedPower As Power, _
				ByVal _RemainingPower As Power, _
				ByVal _UsedPower As Power _
			)

				MyBase.New()

				Index = _Index
				State = _State
				PowerModule1 = _PowerModule1
				PowerModule2 = _PowerModule2
				ManagementPolicy = _ManagementPolicy
				TotalPower = _TotalPower
				AllocatedPower = _AllocatedPower
				RemainingPower = _RemainingPower
				UsedPower = _UsedPower

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						Dim typed_Value As PowerDomain = TryCast(value, PowerDomain)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							return_Value = Index.CompareTo(typed_Value.Index)
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

			#Region " IXmlSerialisable Implementation "

				#Region " Public Methods "

					''' <summary>Method to Return Schema Depicting Object/Class</summary>
					''' <remarks></remarks>
					Public Function IXmlSerialisable_GetSchema() As System.Xml.Schema.XmlSchema Implements System.Xml.Serialization.IXmlSerializable.GetSchema
						Return Leviathan.Configuration.XmlSerialiser.GenerateSchema(Me.GetType)
					End Function

					''' <summary></summary>
					''' <remarks></remarks>
					Public Sub IXmlSerialisable_ReadXml( _
						ByVal reader As System.Xml.XmlReader _
					) Implements System.Xml.Serialization.IXmlSerializable.ReadXml
						Leviathan.Configuration.XmlSerialiser.ReadXml(Me, reader)
					End Sub

					''' <summary></summary>
					''' <remarks></remarks>
					Public Sub IXmlSerialisable_WriteXml( _
						ByVal writer As System.Xml.XmlWriter _
					) Implements System.Xml.Serialization.IXmlSerializable.WriteXml
						Leviathan.Configuration.XmlSerialiser.WriteXml(Me, writer)
					End Sub

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Index</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_INDEX As String = "Index"

			''' <summary>Public Shared Reference to the Name of the Property: State</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_STATE As String = "State"

			''' <summary>Public Shared Reference to the Name of the Property: PowerModule1</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_POWERMODULE1 As String = "PowerModule1"

			''' <summary>Public Shared Reference to the Name of the Property: PowerModule2</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_POWERMODULE2 As String = "PowerModule2"

			''' <summary>Public Shared Reference to the Name of the Property: ManagementPolicy</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_MANAGEMENTPOLICY As String = "ManagementPolicy"

			''' <summary>Public Shared Reference to the Name of the Property: TotalPower</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_TOTALPOWER As String = "TotalPower"

			''' <summary>Public Shared Reference to the Name of the Property: AllocatedPower</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_ALLOCATEDPOWER As String = "AllocatedPower"

			''' <summary>Public Shared Reference to the Name of the Property: RemainingPower</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_REMAININGPOWER As String = "RemainingPower"

			''' <summary>Public Shared Reference to the Name of the Property: UsedPower</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_USEDPOWER As String = "UsedPower"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Index</summary>
			''' <remarks></remarks>
			Private m_Index As System.Int32

			''' <summary>Private Data Storage Variable for Property: State</summary>
			''' <remarks></remarks>
			Private m_State As PowerState

			''' <summary>Private Data Storage Variable for Property: PowerModule1</summary>
			''' <remarks></remarks>
			Private m_PowerModule1 As System.String

			''' <summary>Private Data Storage Variable for Property: PowerModule2</summary>
			''' <remarks></remarks>
			Private m_PowerModule2 As System.String

			''' <summary>Private Data Storage Variable for Property: ManagementPolicy</summary>
			''' <remarks></remarks>
			Private m_ManagementPolicy As PowerDomainPolicy

			''' <summary>Private Data Storage Variable for Property: TotalPower</summary>
			''' <remarks></remarks>
			Private m_TotalPower As Power

			''' <summary>Private Data Storage Variable for Property: AllocatedPower</summary>
			''' <remarks></remarks>
			Private m_AllocatedPower As Power

			''' <summary>Private Data Storage Variable for Property: RemainingPower</summary>
			''' <remarks></remarks>
			Private m_RemainingPower As Power

			''' <summary>Private Data Storage Variable for Property: UsedPower</summary>
			''' <remarks></remarks>
			Private m_UsedPower As Power

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Index</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Index")> _
			Public Property Index() As System.Int32
				Get
					Return m_Index
				End Get
				Set(value As System.Int32)
					m_Index = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: State</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="State")> _
			Public Property State() As PowerState
				Get
					Return m_State
				End Get
				Set(value As PowerState)
					m_State = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: PowerModule1</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="PowerModule1")> _
			Public Property PowerModule1() As System.String
				Get
					Return m_PowerModule1
				End Get
				Set(value As System.String)
					m_PowerModule1 = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: PowerModule2</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="PowerModule2")> _
			Public Property PowerModule2() As System.String
				Get
					Return m_PowerModule2
				End Get
				Set(value As System.String)
					m_PowerModule2 = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: ManagementPolicy</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="ManagementPolicy")> _
			Public Property ManagementPolicy() As PowerDomainPolicy
				Get
					Return m_ManagementPolicy
				End Get
				Set(value As PowerDomainPolicy)
					m_ManagementPolicy = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: TotalPower</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="TotalPower")> _
			Public Property TotalPower() As Power
				Get
					Return m_TotalPower
				End Get
				Set(value As Power)
					m_TotalPower = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: AllocatedPower</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="AllocatedPower")> _
			Public Property AllocatedPower() As Power
				Get
					Return m_AllocatedPower
				End Get
				Set(value As Power)
					m_AllocatedPower = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: RemainingPower</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="RemainingPower")> _
			Public Property RemainingPower() As Power
				Get
					Return m_RemainingPower
				End Get
				Set(value As Power)
					m_RemainingPower = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: UsedPower</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="UsedPower")> _
			Public Property UsedPower() As Power
				Get
					Return m_UsedPower
				End Get
				Set(value As Power)
					m_UsedPower = value
				End Set
			End Property

		#End Region

	End Class

End Namespace