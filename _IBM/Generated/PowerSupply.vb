Namespace IBM

	''' <summary>Class Representing an IBM Power Supply</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>08/02/2014 18:23:19</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Caerus\_IBM\Generated\PowerSupply.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Caerus\_IBM\Generated\PowerSupply.tt", "1")> _
	<System.Serializable()> _
	Partial Public Class PowerSupply
		Inherits System.Object
		Implements System.IComparable
		Implements System.IFormattable
		Implements System.Xml.Serialization.IXmlSerializable

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32 _
			)

				MyBase.New()

				Index = _Index

			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _Exists As System.Boolean _
			)

				MyBase.New()

				Index = _Index
				Exists = _Exists

			End Sub

			''' <summary>Parametered Constructor (3 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _Exists As System.Boolean, _
				ByVal _State As PowerSupplyState _
			)

				MyBase.New()

				Index = _Index
				Exists = _Exists
				State = _State

			End Sub

			''' <summary>Parametered Constructor (4 Parameters)</summary>
			Public Sub New( _
				ByVal _Index As System.Int32, _
				ByVal _Exists As System.Boolean, _
				ByVal _State As PowerSupplyState, _
				ByVal _Details As System.String _
			)

				MyBase.New()

				Index = _Index
				Exists = _Exists
				State = _State
				Details = _Details

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						Dim typed_Value As PowerSupply = TryCast(value, PowerSupply)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							return_Value = Index.CompareTo(typed_Value.Index)
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

			#Region " IFormattable Implementation "

				#Region " Public Constants "

					''' <summary>Public Shared Reference to the Name of the Property: AsString</summary>
					''' <remarks></remarks>
					Public Const PROPERTY_ASSTRING As String = "AsString"

				#End Region

				#Region " Public Properties "

					''' <summary></summary>
					''' <remarks></remarks>
					Public ReadOnly Property AsString() As System.String
						Get
							Return Me.ToString()
						End Get
					End Property

				#End Region

				#Region " Public Shared Methods "

					Public Shared Function ToString_default() As String
						Return String.Format("{Name}")

				End Function

			#End Region

			#Region " Public Methods "

				Public Overloads Overrides Function ToString() As String

					Return Me.ToString(String.Empty, Nothing)

				End Function

				Public Overloads Function ToString( _
					ByVal format As String _
				) As String

					If String.IsNullOrEmpty(format) OrElse String.Compare(format, "default", True) = 0 Then

						Return ToString_default()

					End If

					Return String.Empty

				End Function

				Public Overloads Function ToString( _
					ByVal format As String, _
					ByVal formatProvider As System.IFormatProvider _
				) As String Implements System.IFormattable.ToString

					If String.IsNullOrEmpty(format) OrElse String.Compare(format, "default", True) = 0 Then	

						Return ToString_default()

					End If

					Return String.Empty

				End Function

			#End Region

			#End Region

			#Region " IXmlSerialisable Implementation "

				#Region " Public Methods "

					''' <summary>Method to Return Schema Depicting Object/Class</summary>
					''' <remarks></remarks>
					Public Function IXmlSerialisable_GetSchema() As System.Xml.Schema.XmlSchema Implements System.Xml.Serialization.IXmlSerializable.GetSchema
						Return Leviathan.Configuration.XmlSerialiser.GenerateSchema(Me.GetType)
					End Function

					''' <summary></summary>
					''' <remarks></remarks>
					Public Sub IXmlSerialisable_ReadXml( _
						ByVal reader As System.Xml.XmlReader _
					) Implements System.Xml.Serialization.IXmlSerializable.ReadXml
						Leviathan.Configuration.XmlSerialiser.ReadXml(Me, reader)
					End Sub

					''' <summary></summary>
					''' <remarks></remarks>
					Public Sub IXmlSerialisable_WriteXml( _
						ByVal writer As System.Xml.XmlWriter _
					) Implements System.Xml.Serialization.IXmlSerializable.WriteXml
						Leviathan.Configuration.XmlSerialiser.WriteXml(Me, writer)
					End Sub

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Index</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_INDEX As String = "Index"

			''' <summary>Public Shared Reference to the Name of the Property: Exists</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_EXISTS As String = "Exists"

			''' <summary>Public Shared Reference to the Name of the Property: State</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_STATE As String = "State"

			''' <summary>Public Shared Reference to the Name of the Property: Details</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_DETAILS As String = "Details"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Index</summary>
			''' <remarks></remarks>
			Private m_Index As System.Int32

			''' <summary>Private Data Storage Variable for Property: Exists</summary>
			''' <remarks></remarks>
			Private m_Exists As System.Boolean

			''' <summary>Private Data Storage Variable for Property: State</summary>
			''' <remarks></remarks>
			Private m_State As PowerSupplyState

			''' <summary>Private Data Storage Variable for Property: Details</summary>
			''' <remarks></remarks>
			Private m_Details As System.String

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Index</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Index")> _
			Public Property Index() As System.Int32
				Get
					Return m_Index
				End Get
				Set(value As System.Int32)
					m_Index = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Exists</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Exists")> _
			Public Property Exists() As System.Boolean
				Get
					Return m_Exists
				End Get
				Set(value As System.Boolean)
					m_Exists = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: State</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="State")> _
			Public Property State() As PowerSupplyState
				Get
					Return m_State
				End Get
				Set(value As PowerSupplyState)
					m_State = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Details</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Details")> _
			Public Property Details() As System.String
				Get
					Return m_Details
				End Get
				Set(value As System.String)
					m_Details = value
				End Set
			End Property

		#End Region

	End Class

End Namespace