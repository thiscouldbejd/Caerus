<# Add_Class(a:="Cisco", d:="Entity or Sensor") #>
<# Add_Behaviour(n:="Comparable", p:="Fd_Comparable:Index") #>
<# Add_Behaviour(n:="Formattable", p:="Fo_Name:|Fo_Values:{Name}") #>
<# Add_Behaviour(n:="Serialisable") #>
<# Add_Behaviour(n:="Snmp") #>
<# Add_Field(n:="Index", t:="System.Int32", d:="The index for this entry.") #>
<# Add_Field(n:="Name", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.7.{Index}", d:="The name for this entry.") #>
<# Add_Field(n:="Description", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.2.{Index}", d:="A textual description of physical entity. This object should contain a string that identifies the manufacturer's name for the physical entity, and should be set to a distinct value for each version or model of the physical entity.") #>
<# Add_Field(n:="ParentIndex", t:="System.Int32", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.4.{Index}", d:="The value of entPhysicalIndex for the physical entity which 'contains' this physical entity.  A value of zero indicates this physical entity is not contained in any other physical entity.  Note that the set of 'containment' relationships define a strict hierarchy;that is, recursion is not allowed. In the event that a physical entity is contained by more than one physical entity (e.g., double-wide modules), this object should identify the containing entity with the lowest value of entPhysicalIndex.") #>
<# Add_Field(n:="Type", t:="HardwareType", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.5.{Index}", d:="An indication of the general hardware type of the physical entity. An agent should set this object to the standard enumeration value that most accurately indicates the general class of the physical entity, or the primary class if there is more than one entity. If no appropriate standard registration identifier exists for this physical entity, then the value 'other(1)' is returned.  If the value is unknown by this agent, then the value 'unknown(2)' is returned.") #>
<# Add_Field(n:="HardwareVersion", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.8.{Index}", d:="The vendor-specific hardware revision string for the physical entity. The preferred value is the hardware revision identifier actually printed on the component itself (if present). Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format, in an implementation-specific manner. If no specific hardware revision string is associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.") #>
<# Add_Field(n:="FirmwareVersion", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.9.{Index}", d:="The vendor-specific firmware revision string for the physical entity. Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format, in an implementation-specific manner. If no specific firmware programs are associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.") #>
<# Add_Field(n:="SoftwareVersion", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.10.{Index}", d:="The vendor-specific software revision string for the physical entity. Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format, in an implementation-specific manner. If no specific software programs are associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.") #>
<# Add_Field(n:="SerialNumber", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.11.{Index}", d:="The vendor-specific serial number string for the physical entity.  The preferred value is the serial number string actually printed on the component itself (if present). On the first instantiation of an physical entity, the value of entPhysicalSerialNum associated with that entity is set to the correct vendor-assigned serial number, if this information is available to the agent.  If a serial number is unknown or non-existent, the entPhysicalSerialNum will be set to a zero-length string instead. Note that implementations that can correctly identify the serial numbers of all installed physical entities do not need to provide write access to the entPhysicalSerialNum object. Agents which cannot provide non-volatile storage for the entPhysicalSerialNum strings are not required to implement write access for this object. Not every physical component will have a serial number, or even need one.  Physical entities for which the associated value of the entPhysicalIsFRU object is equal to 'false(2)' (e.g., the repeater ports within a repeater module), do not need their own unique serial number.  An agent does not have to provide write access for such entities, and may return a zero-length string. If write access is implemented for an instance of entPhysicalSerialNum, and a value is written into the instance, the agent must retain the supplied value in the entPhysicalSerialNum instance (associated with the same physical entity) for as long as that entity remains instantiated.  This includes instantiations across all re-initializations/reboots of the network management system, including those resulting in a change of the physical entity's entPhysicalIndex value.") #>
<# Add_Field(n:="Manufacturer", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.12.{Index}", d:="The name of the manufacturer of this physical component. The preferred value is the manufacturer name string actually printed on the component itself (if present). Note that comparisons between instances of the entPhysicalModelName, entPhysicalFirmwareRev, entPhysicalSoftwareRev, and the entPhysicalSerialNum objects, are only meaningful amongst entPhysicalEntries with the same value of entPhysicalMfgName. If the manufacturer name string associated with the physical component is unknown to the agent, then this object will contain a zero-length string.") #>
<# Add_Field(n:="Model", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.13.{Index}", d:="The vendor-specific model name identifier string associated with this physical component.  The preferred value is the customer-visible part number, which may be printed on the component itself. If the model name string associated with the physical component is unknown to the agent, then this object will contain a zero-length string.") #>
<# Add_Field(n:="Alias", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.14.{Index}", d:="This object is an 'alias' name for the physical entity, as specified by a network manager, and provides a non-volatile 'handle' for the physical entity. On the first instantiation of a physical entity, the value of entPhysicalAlias associated with that entity is set to the zero-length string.  However, the agent may set the value to a locally unique default value, instead of a zero-length string. If write access is implemented for an instance of entPhysicalAlias, and a value is written into the instance, the agent must retain the supplied value in the entPhysicalAlias instance (associated with the same physical entity) for as long as that entity remains instantiated. This includes instantiations across all re-initializations/reboots of the network management system, including those resulting in a change of the physical entity's entPhysicalIndex value.") #>
<# Add_Field(n:="AssetId", t:="System.String", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.15.{Index}", d:="This object is a user-assigned asset tracking identifier (as specified by a network manager) for the physical entity, and provides non-volatile storage of this information. On the first instantiation of a physical entity, the value of entPhysicalAssetID associated with that entity is set to the zero-length string. Not every physical component will have an asset tracking identifier, or even need one.  Physical entities for which the associated value of the entPhysicalIsFRU object is equal to 'false(2)' (e.g., the repeater ports within a repeater module), do not need their own unique asset tracking identifier.  An agent does not have to provide write access for such entities, and may instead return a zero-length string. If write access is implemented for an instance of entPhysicalAssetID, and a value is written into the instance, the agent must retain the supplied value in the entPhysicalAssetID instance (associated with the same physical entity) for as long as that entity remains instantiated.  This includes instantiations across all re-initializations/reboots of the network management system, including those resulting in a change of the physical entity's entPhysicalIndex value. If no asset tracking information is associated with the physical component, then this object will contain a zero-length string.") #>
<# Add_Field(n:="Replaceable", t:="System.Boolean", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.16.{Index}", d:="This object indicates whether or not this physical entity is considered a 'field replaceable unit' by the vendor. If this object contains the value 'true(1)' then this entPhysicalEntry identifies a field replaceable unit. For all entPhysicalEntries that represent components permanently contained within a field replaceable unit, the value 'false(2)' should be returned for this object.") #>
<# Add_Field(n:="ManufacturedDate", t:="System.DateTime", m:="Snmp:1.3.6.1.2.1.47.1.1.1.1.17.{Index}", d:="This object contains the date of manufacturing of the managed entity.  If the manufacturing date is unknown or not supported, the object is not instantiated.  The special value '0000000000000000'H may also be returned in this case.") #>
<# Add_Field(n:="Units", t:="SensorUnits",m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.1.{Index}", d:="This variable indicates the type of data reported by the entSensorValue. This variable is set by the agent at start-up and the value does not change during operation.") #>
<# Add_Field(n:="Scale", t:="SensorScale", m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.2.{Index}", d:="This variable indicates the exponent to apply to sensor values reported by entSensorValue. This variable is set by the agent at start-up and the value does not change during operation.") #>
<# Add_Field(n:="Precision", t:="System.Int32", m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.3.{Index}", d:="This variable indicates the number of decimal places of precision in fixed-point sensor values reported by entSensorValue. This variable is set to 0 when entSensorType is not a fixed-point type:voltsAC(1), voltsDC(2), amperes(3), watts(4), hertz(5), celsius(6), or cmm(9). This variable is set by the agent at start-up and the value does not change during operation.") #>
<# Add_Field(n:="Value", t:="System.Int64", m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.4.{Index}|Snmp_Transient:True", d:="This variable reports the most recent measurement seen by the sensor. To correctly display or interpret this variable's value, you must also know entSensorType, entSensorScale, and entSensorPrecision. However, you can compare entSensorValue with the threshold values given in entSensorThresholdTable without any semantic knowledge.") #>
<# Add_Field(n:="Status", t:="SensorStatus", m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.5.{Index}", d:="This variable indicates the present operational status of the sensor.") #>
<# Add_Field(n:="Age",t:="System.TimeSpan", m:="Snmp:1.3.6.1.4.1.9.9.91.1.1.1.1.6.{Index}", d:="This variable indicates the age of the value reported by entSensorValue.") #>
<# Add_Field(n:="Thresholds", t:="SensorThresholdCollection", m:="Snmp:1.3.6.1.4.1.9.9.91.1.2.1.1.2.{Index}.#|Snmp_Field:Index") #>
<#@ include file="%TEMPLATES_PATH%\Classes\VB_Object.tt" #>